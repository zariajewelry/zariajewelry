generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model User {
  id                       String    @id @default(uuid())
  name                     String?
  firstName                String?
  lastName                 String?
  email                    String?   @unique
  emailVerificationToken   String?   @unique
  emailVerificationExpiry  DateTime?
  emailVerified            DateTime?
  isVerified               Boolean   @default(false)
  password                 String?
  resetPasswordToken       String?   @unique
  resetPasswordExpire      DateTime?
  role                     UserRole  @default(USER)
  image                    String?
  isSubscribedToNewsletter Boolean   @default(false)
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  // Relationships
  orders    Order[]
  addresses ShippingAddress[]
  cart      Cart?
  wishlist  WishlistItem[]
  reviews   ProductReview[]
  Account   Account[]
  Session   Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Decimal
  slug        String   @unique
  isFeatured  Boolean  @default(false)
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  category      Category         @relation(fields: [categoryId], references: [id])
  categoryId    String
  variants      ProductVariant[]
  reviews       ProductReview[]
  images        ProductImage[]
  wishlistItems WishlistItem[]
}

model ProductVariant {
  id        String  @id @default(uuid())
  sku       String  @unique
  size      String
  color     String
  stock     Int     @default(0)
  product   Product @relation(fields: [productId], references: [id])
  productId String

  // Relationships
  cartItems  CartItem[]
  orderItems OrderItem[]
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  products Product[]
}

model Order {
  id            String        @id @default(uuid())
  total         Decimal
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relationships
  user              User            @relation(fields: [userId], references: [id])
  userId            String
  items             OrderItem[]
  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String
}

model OrderItem {
  id        String         @id @default(uuid())
  quantity  Int
  price     Decimal
  order     Order          @relation(fields: [orderId], references: [id])
  orderId   String
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId String
}

model ShippingAddress {
  id         String   @id @default(uuid())
  fullName   String
  address    String
  city       String
  state      String
  postalCode String
  phone      String
  createdAt  DateTime @default(now())

  // Relationships
  user   User    @relation(fields: [userId], references: [id])
  userId String
  orders Order[]
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String         @id @default(uuid())
  quantity  Int            @default(1)
  cart      Cart           @relation(fields: [cartId], references: [id])
  cartId    String
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId String
}

model ProductReview {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relationships
  product   Product @relation(fields: [productId], references: [id])
  productId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  altText   String?
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model WishlistItem {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
}
